program: train.py
method: bayes
metric: 
  goal: maximize
  name: cumulative_reward
parameters:
  hardcore:
    value: true
  no_improvement_window:
    value: 200
  max_episodes:
    value: 200
  seed_steps: 
    distribution: uniform
    min: 2000
    max: 20_000
  encoder.encoder_dim:
    values: [32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128]
  encoder.num_encoder_layers:
    values: [1, 2]
  world_model.mlp_dim:
    values: [32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128, 136, 144, 152, 160]
  world_model.latent_dim:
    values: [32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128, 136, 144, 152, 160, 168, 176, 184, 192, 200, 208, 216, 224, 232, 240, 248, 256]
  world_model.value_dropout:
    values: [0.001, 0.005]
  world_model.num_value_nets:
    value: 5
  world_model.learning_rate:
    distribution: log_uniform_values
    min: 2e-4
    max: 5e-3
  world_model.encoder_learning_rate:
    distribution: log_uniform_values
    min: 8e-5
    max: 1e-3
  world_model.predict_continues:
    values: [true, false]
  tdmpc2.horizon:
    values: [5, 8]
  tdmpc2.mppi_iterations:
    values: [6, 8, 10]
  tdmpc2.population_size:
    value: 1024
  tdmpc2.temperature:
    distribution: uniform
    min: 0.05
    max: 0.8
  tdmpc2.entropy_coef:
    distribution: log_uniform_values
    min: 1e-5
    max: 1e-3
command:
  - ${env}
  - python
  - ${program}
  - ${args_no_hyphens}
